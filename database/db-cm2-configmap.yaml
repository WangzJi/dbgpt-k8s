apiVersion: v1
data:
  case_1_student_manager_mysql.sql: |
    create database case_1_student_manager character set utf8;
    use case_1_student_manager;

    CREATE TABLE students (
        student_id INT PRIMARY KEY,
        student_name VARCHAR(100) COMMENT '学生姓名',
        major VARCHAR(100) COMMENT '专业',
        year_of_enrollment INT COMMENT '入学年份',
        student_age INT COMMENT '学生年龄'
    ) COMMENT '学生信息表';

    CREATE TABLE courses (
        course_id INT PRIMARY KEY,
        course_name VARCHAR(100) COMMENT '课程名称',
        credit FLOAT COMMENT '学分'
    ) COMMENT '课程信息表';

    CREATE TABLE scores (
        student_id INT,
        course_id INT,
        score INT COMMENT '得分',
        semester VARCHAR(50) COMMENT '学期',
        PRIMARY KEY (student_id, course_id),
        FOREIGN KEY (student_id) REFERENCES students(student_id),
        FOREIGN KEY (course_id) REFERENCES courses(course_id)
    ) COMMENT '学生成绩表';


    INSERT INTO students (student_id, student_name, major, year_of_enrollment, student_age) VALUES
    (1, '张三', '计算机科学', 2020, 20),
    (2, '李四', '计算机科学', 2021, 19),
    (3, '王五', '物理学', 2020, 21),
    (4, '赵六', '数学', 2021, 19),
    (5, '周七', '计算机科学', 2022, 18),
    (6, '吴八', '物理学', 2020, 21),
    (7, '郑九', '数学', 2021, 19),
    (8, '孙十', '计算机科学', 2022, 18),
    (9, '刘十一', '物理学', 2020, 21),
    (10, '陈十二', '数学', 2021, 19);

    INSERT INTO courses (course_id, course_name, credit) VALUES
    (1, '计算机基础', 3),
    (2, '数据结构', 4),
    (3, '高等物理', 3),
    (4, '线性代数', 4),
    (5, '微积分', 5),
    (6, '编程语言', 4),
    (7, '量子力学', 3),
    (8, '概率论', 4),
    (9, '数据库系统', 4),
    (10, '计算机网络', 4);

    INSERT INTO scores (student_id, course_id, score, semester) VALUES
    (1, 1, 90, '2020年秋季'),
    (1, 2, 85, '2021年春季'),
    (2, 1, 88, '2021年秋季'),
    (2, 2, 90, '2022年春季'),
    (3, 3, 92, '2020年秋季'),
    (3, 4, 85, '2021年春季'),
    (4, 3, 88, '2021年秋季'),
    (4, 4, 86, '2022年春季'),
    (5, 1, 90, '2022年秋季'),
    (5, 2, 87, '2023年春季');
  case_1_student_manager_sqlite.sql: |
    CREATE TABLE students (
        student_id INTEGER PRIMARY KEY,
        student_name VARCHAR(100),
        major VARCHAR(100),
        year_of_enrollment INTEGER,
        student_age INTEGER
    );

    CREATE TABLE courses (
        course_id INTEGER PRIMARY KEY,
        course_name VARCHAR(100),
        credit REAL
    );

    CREATE TABLE scores (
        student_id INTEGER,
        course_id INTEGER,
        score INTEGER,
        semester VARCHAR(50),
        PRIMARY KEY (student_id, course_id),
        FOREIGN KEY (student_id) REFERENCES students(student_id),
        FOREIGN KEY (course_id) REFERENCES courses(course_id)
    );

    INSERT INTO students (student_id, student_name, major, year_of_enrollment, student_age) VALUES
    (1, '张三', '计算机科学', 2020, 20),
    (2, '李四', '计算机科学', 2021, 19),
    (3, '王五', '物理学', 2020, 21),
    (4, '赵六', '数学', 2021, 19),
    (5, '周七', '计算机科学', 2022, 18),
    (6, '吴八', '物理学', 2020, 21),
    (7, '郑九', '数学', 2021, 19),
    (8, '孙十', '计算机科学', 2022, 18),
    (9, '刘十一', '物理学', 2020, 21),
    (10, '陈十二', '数学', 2021, 19);

    INSERT INTO courses (course_id, course_name, credit) VALUES
    (1, '计算机基础', 3),
    (2, '数据结构', 4),
    (3, '高等物理', 3),
    (4, '线性代数', 4),
    (5, '微积分', 5),
    (6, '编程语言', 4),
    (7, '量子力学', 3),
    (8, '概率论', 4),
    (9, '数据库系统', 4),
    (10, '计算机网络', 4);

    INSERT INTO scores (student_id, course_id, score, semester) VALUES
    (1, 1, 90, '2020年秋季'),
    (1, 2, 85, '2021年春季'),
    (2, 1, 88, '2021年秋季'),
    (2, 2, 90, '2022年春季'),
    (3, 3, 92, '2020年秋季'),
    (3, 4, 85, '2021年春季'),
    (4, 3, 88, '2021年秋季'),
    (4, 4, 86, '2022年春季'),
    (5, 1, 90, '2022年秋季'),
    (5, 2, 87, '2023年春季');
  case_1_student_manager_vertica.sql: |
    CREATE SCHEMA case_1_student_manager;
    COMMENT ON SCHEMA case_1_student_manager is '学校管理系统';

    SET SEARCH_PATH = case_1_student_manager;

    CREATE TABLE students (
        student_id INT PRIMARY KEY,
        student_name VARCHAR(100),
        major VARCHAR(100),
        year_of_enrollment INT,
        student_age INT
    );
    COMMENT ON TABLE students IS '学生信息表';
    COMMENT ON COLUMN students.student_name IS '学生姓名';
    COMMENT ON COLUMN students.major IS '专业';
    COMMENT ON COLUMN students.year_of_enrollment IS '入学年份';
    COMMENT ON COLUMN students.student_age IS '学生年龄';

    CREATE TABLE courses (
        course_id INT PRIMARY KEY,
        course_name VARCHAR(100),
        credit FLOAT
    );
    COMMENT ON TABLE courses IS '课程信息表';
    COMMENT ON COLUMN courses.course_name IS '课程名称';
    COMMENT ON COLUMN courses.credit IS '学分';

    CREATE TABLE scores (
        student_id INT,
        course_id INT,
        score INT,
        semester VARCHAR(50),
        PRIMARY KEY (student_id, course_id),
        FOREIGN KEY (student_id) REFERENCES students(student_id),
        FOREIGN KEY (course_id) REFERENCES courses(course_id)
    );
    COMMENT ON TABLE scores IS '学生成绩表';
    COMMENT ON COLUMN scores.score IS '得分';
    COMMENT ON COLUMN scores.semester IS '学期';


    INSERT INTO students (student_id, student_name, major, year_of_enrollment, student_age) VALUES
    (1, '张三', '计算机科学', 2020, 20),
    (2, '李四', '计算机科学', 2021, 19),
    (3, '王五', '物理学', 2020, 21),
    (4, '赵六', '数学', 2021, 19),
    (5, '周七', '计算机科学', 2022, 18),
    (6, '吴八', '物理学', 2020, 21),
    (7, '郑九', '数学', 2021, 19),
    (8, '孙十', '计算机科学', 2022, 18),
    (9, '刘十一', '物理学', 2020, 21),
    (10, '陈十二', '数学', 2021, 19);

    INSERT INTO courses (course_id, course_name, credit) VALUES
    (1, '计算机基础', 3),
    (2, '数据结构', 4),
    (3, '高等物理', 3),
    (4, '线性代数', 4),
    (5, '微积分', 5),
    (6, '编程语言', 4),
    (7, '量子力学', 3),
    (8, '概率论', 4),
    (9, '数据库系统', 4),
    (10, '计算机网络', 4);

    INSERT INTO scores (student_id, course_id, score, semester) VALUES
    (1, 1, 90, '2020年秋季'),
    (1, 2, 85, '2021年春季'),
    (2, 1, 88, '2021年秋季'),
    (2, 2, 90, '2022年春季'),
    (3, 3, 92, '2020年秋季'),
    (3, 4, 85, '2021年春季'),
    (4, 3, 88, '2021年秋季'),
    (4, 4, 86, '2022年春季'),
    (5, 1, 90, '2022年秋季'),
    (5, 2, 87, '2023年春季');

    COMMIT;
  case_2_ecom_mysql.sql: |
    create database case_2_ecom character set utf8;
    use case_2_ecom;

    CREATE TABLE users (
        user_id INT PRIMARY KEY,
        user_name VARCHAR(100) COMMENT '用户名',
        user_email VARCHAR(100) COMMENT '用户邮箱',
        registration_date DATE COMMENT '注册日期',
        user_country VARCHAR(100) COMMENT '用户国家'
    ) COMMENT '用户信息表';

    CREATE TABLE products (
        product_id INT PRIMARY KEY,
        product_name VARCHAR(100) COMMENT '商品名称',
        product_price FLOAT COMMENT '商品价格'
    ) COMMENT '商品信息表';

    CREATE TABLE orders (
        order_id INT PRIMARY KEY,
        user_id INT,
        product_id INT,
        quantity INT COMMENT '数量',
        order_date DATE COMMENT '订单日期',
        FOREIGN KEY (user_id) REFERENCES users(user_id),
        FOREIGN KEY (product_id) REFERENCES products(product_id)
    ) COMMENT '订单信息表';


    INSERT INTO users (user_id, user_name, user_email, registration_date, user_country) VALUES
    (1, 'John', 'john@gmail.com', '2020-01-01', 'USA'),
    (2, 'Mary', 'mary@gmail.com', '2021-01-01', 'UK'),
    (3, 'Bob', 'bob@gmail.com', '2020-01-01', 'USA'),
    (4, 'Alice', 'alice@gmail.com', '2021-01-01', 'UK'),
    (5, 'Charlie', 'charlie@gmail.com', '2020-01-01', 'USA'),
    (6, 'David', 'david@gmail.com', '2021-01-01', 'UK'),
    (7, 'Eve', 'eve@gmail.com', '2020-01-01', 'USA'),
    (8, 'Frank', 'frank@gmail.com', '2021-01-01', 'UK'),
    (9, 'Grace', 'grace@gmail.com', '2020-01-01', 'USA'),
    (10, 'Helen', 'helen@gmail.com', '2021-01-01', 'UK');

    INSERT INTO products (product_id, product_name, product_price) VALUES
    (1, 'iPhone', 699),
    (2, 'Samsung Galaxy', 599),
    (3, 'iPad', 329),
    (4, 'Macbook', 1299),
    (5, 'Apple Watch', 399),
    (6, 'AirPods', 159),
    (7, 'Echo', 99),
    (8, 'Kindle', 89),
    (9, 'Fire TV Stick', 39),
    (10, 'Echo Dot', 49);

    INSERT INTO orders (order_id, user_id, product_id, quantity, order_date) VALUES
    (1, 1, 1, 1, '2022-01-01'),
    (2, 1, 2, 1, '2022-02-01'),
    (3, 2, 3, 2, '2022-03-01'),
    (4, 2, 4, 1, '2022-04-01'),
    (5, 3, 5, 2, '2022-05-01'),
    (6, 3, 6, 3, '2022-06-01'),
    (7, 4, 7, 2, '2022-07-01'),
    (8, 4, 8, 1, '2022-08-01'),
    (9, 5, 9, 2, '2022-09-01'),
    (10, 5, 10, 3, '2022-10-01');
  case_2_ecom_sqlite.sql: |
    CREATE TABLE users (
        user_id INTEGER PRIMARY KEY,
        user_name VARCHAR(100),
        user_email VARCHAR(100),
        registration_date DATE,
        user_country VARCHAR(100)
    );

    CREATE TABLE products (
        product_id INTEGER PRIMARY KEY,
        product_name VARCHAR(100),
        product_price REAL
    );

    CREATE TABLE orders (
        order_id INTEGER PRIMARY KEY,
        user_id INTEGER,
        product_id INTEGER,
        quantity INTEGER,
        order_date DATE,
        FOREIGN KEY (user_id) REFERENCES users(user_id),
        FOREIGN KEY (product_id) REFERENCES products(product_id)
    );

    INSERT INTO users (user_id, user_name, user_email, registration_date, user_country) VALUES
    (1, 'John', 'john@gmail.com', '2020-01-01', 'USA'),
    (2, 'Mary', 'mary@gmail.com', '2021-01-01', 'UK'),
    (3, 'Bob', 'bob@gmail.com', '2020-01-01', 'USA'),
    (4, 'Alice', 'alice@gmail.com', '2021-01-01', 'UK'),
    (5, 'Charlie', 'charlie@gmail.com', '2020-01-01', 'USA'),
    (6, 'David', 'david@gmail.com', '2021-01-01', 'UK'),
    (7, 'Eve', 'eve@gmail.com', '2020-01-01', 'USA'),
    (8, 'Frank', 'frank@gmail.com', '2021-01-01', 'UK'),
    (9, 'Grace', 'grace@gmail.com', '2020-01-01', 'USA'),
    (10, 'Helen', 'helen@gmail.com', '2021-01-01', 'UK');

    INSERT INTO products (product_id, product_name, product_price) VALUES
    (1, 'iPhone', 699),
    (2, 'Samsung Galaxy', 599),
    (3, 'iPad', 329),
    (4, 'Macbook', 1299),
    (5, 'Apple Watch', 399),
    (6, 'AirPods', 159),
    (7, 'Echo', 99),
    (8, 'Kindle', 89),
    (9, 'Fire TV Stick', 39),
    (10, 'Echo Dot', 49);

    INSERT INTO orders (order_id, user_id, product_id, quantity, order_date) VALUES
    (1, 1, 1, 1, '2022-01-01'),
    (2, 1, 2, 1, '2022-02-01'),
    (3, 2, 3, 2, '2022-03-01'),
    (4, 2, 4, 1, '2022-04-01'),
    (5, 3, 5, 2, '2022-05-01'),
    (6, 3, 6, 3, '2022-06-01'),
    (7, 4, 7, 2, '2022-07-01'),
    (8, 4, 8, 1, '2022-08-01'),
    (9, 5, 9, 2, '2022-09-01'),
    (10, 5, 10, 3, '2022-10-01');
  case_2_ecom_vertica.sql: |
    CREATE SCHEMA case_2_ecom;
    COMMENT ON SCHEMA case_2_ecom is '电子商务系统';

    SET SEARCH_PATH = case_2_ecom;

    CREATE TABLE users (
        user_id INT PRIMARY KEY,
        user_name VARCHAR(100),
        user_email VARCHAR(100),
        registration_date DATE,
        user_country VARCHAR(100)
    );
    COMMENT ON TABLE users IS '用户信息表';
    COMMENT ON COLUMN users.user_name IS '用户名';
    COMMENT ON COLUMN users.user_email IS '用户邮箱';
    COMMENT ON COLUMN users.registration_date IS '注册日期';
    COMMENT ON COLUMN users.user_country  IS '用户国家';

    CREATE TABLE products (
        product_id INT PRIMARY KEY,
        product_name VARCHAR(100),
        product_price FLOAT
    );
    COMMENT ON TABLE products IS '商品信息表';
    COMMENT ON COLUMN products.product_name IS '商品名称';
    COMMENT ON COLUMN products.product_price IS '商品价格';

    CREATE TABLE orders (
        order_id INT PRIMARY KEY,
        user_id INT,
        product_id INT,
        quantity INT,
        order_date DATE,
        FOREIGN KEY (user_id) REFERENCES users(user_id),
        FOREIGN KEY (product_id) REFERENCES products(product_id)
    );
    COMMENT ON TABLE orders IS '订单信息表';
    COMMENT ON COLUMN orders.quantity IS '数量';
    COMMENT ON COLUMN orders.order_date IS '订单日期';


    INSERT INTO users (user_id, user_name, user_email, registration_date, user_country) VALUES
    (1, 'John', 'john@gmail.com', '2020-01-01', 'USA'),
    (2, 'Mary', 'mary@gmail.com', '2021-01-01', 'UK'),
    (3, 'Bob', 'bob@gmail.com', '2020-01-01', 'USA'),
    (4, 'Alice', 'alice@gmail.com', '2021-01-01', 'UK'),
    (5, 'Charlie', 'charlie@gmail.com', '2020-01-01', 'USA'),
    (6, 'David', 'david@gmail.com', '2021-01-01', 'UK'),
    (7, 'Eve', 'eve@gmail.com', '2020-01-01', 'USA'),
    (8, 'Frank', 'frank@gmail.com', '2021-01-01', 'UK'),
    (9, 'Grace', 'grace@gmail.com', '2020-01-01', 'USA'),
    (10, 'Helen', 'helen@gmail.com', '2021-01-01', 'UK');

    INSERT INTO products (product_id, product_name, product_price) VALUES
    (1, 'iPhone', 699),
    (2, 'Samsung Galaxy', 599),
    (3, 'iPad', 329),
    (4, 'Macbook', 1299),
    (5, 'Apple Watch', 399),
    (6, 'AirPods', 159),
    (7, 'Echo', 99),
    (8, 'Kindle', 89),
    (9, 'Fire TV Stick', 39),
    (10, 'Echo Dot', 49);

    INSERT INTO orders (order_id, user_id, product_id, quantity, order_date) VALUES
    (1, 1, 1, 1, '2022-01-01'),
    (2, 1, 2, 1, '2022-02-01'),
    (3, 2, 3, 2, '2022-03-01'),
    (4, 2, 4, 1, '2022-04-01'),
    (5, 3, 5, 2, '2022-05-01'),
    (6, 3, 6, 3, '2022-06-01'),
    (7, 4, 7, 2, '2022-07-01'),
    (8, 4, 8, 1, '2022-08-01'),
    (9, 5, 9, 2, '2022-09-01'),
    (10, 5, 10, 3, '2022-10-01');

    COMMIT;
  case_3_order_wide_table_sqlite_wide.sql: "CREATE TABLE order_wide_table (\n\n    -- order_base\n    order_id TEXT, -- 订单ID\n    order_no TEXT, -- 订单编号\n    parent_order_no TEXT, -- 父订单编号\n    order_type INTEGER, -- 订单类型：1实物2虚拟3混合\n    order_status INTEGER, -- 订单状态\n    order_source TEXT, -- 订单来源\n    order_source_detail TEXT, -- 订单来源详情\n    create_time DATETIME, -- 创建时间\n    pay_time DATETIME, -- 支付时间\n    finish_time DATETIME, -- 完成时间\n    close_time DATETIME, -- 关闭时间\n    cancel_time DATETIME, -- 取消时间\n    cancel_reason TEXT, -- 取消原因\n    order_remark TEXT, -- 订单备注\n    seller_remark TEXT, -- 卖家备注\n    buyer_remark TEXT, -- 买家备注\n    is_deleted INTEGER, -- 是否删除\n    delete_time DATETIME, -- 删除时间\n    order_ip TEXT, -- 下单IP\n    order_platform TEXT, -- 下单平台\n    order_device TEXT, -- 下单设备\n    order_app_version TEXT, -- APP版本号\n\n    -- order_amount\n    currency TEXT, -- 货币类型\n    exchange_rate REAL, -- 汇率\n    original_amount REAL, -- 原始金额\n    discount_amount REAL, -- 优惠金额\n    coupon_amount REAL, -- 优惠券金额\n    points_amount REAL, -- 积分抵扣金额\n    shipping_amount REAL, -- 运费\n    insurance_amount REAL, -- 保价费\n    tax_amount REAL, -- 税费\n    tariff_amount REAL, -- 关税\n    payment_amount REAL, -- 实付金额\n    commission_amount REAL, -- 佣金金额\n    platform_fee REAL, -- 平台费用\n    seller_income REAL, -- 卖家实收\n    payment_currency TEXT, -- 支付货币\n    payment_exchange_rate REAL, -- 支付汇率\n\n    -- user_info\n    user_id TEXT, -- 用户ID\n    user_name TEXT, -- 用户名\n    user_nickname TEXT, -- 用户昵称\n    user_level INTEGER, -- 用户等级\n    user_type INTEGER, -- 用户类型\n    register_time DATETIME, -- 注册时间\n    register_source TEXT, -- 注册来源\n    mobile TEXT, -- 手机号\n    mobile_area TEXT, -- 手机号区号\n    email TEXT, -- 邮箱\n    is_vip INTEGER, -- 是否VIP\n    vip_level INTEGER, -- VIP等级\n    vip_expire_time DATETIME, -- VIP过期时间\n    user_age INTEGER, -- 用户年龄\n    user_gender INTEGER, -- 用户性别\n    user_birthday DATE, -- 用户生日\n    user_avatar TEXT, -- 用户头像\n    user_province TEXT, -- 用户所在省\n    user_city TEXT, -- 用户所在市\n    user_district TEXT, -- 用户所在区\n    last_login_time DATETIME, -- 最后登录时间\n    last_login_ip TEXT, -- 最后登录IP\n    user_credit_score INTEGER, -- 用户信用分\n    total_order_count INTEGER, -- 历史订单数\n    total_order_amount REAL, -- 历史订单金额\n\n    -- product_info\n    product_id TEXT, -- 商品ID\n    product_code TEXT, -- 商品编码\n    product_name TEXT, -- 商品名称\n    product_short_name TEXT, -- 商品短名称\n    product_type INTEGER, -- 商品类型\n    product_status INTEGER, -- 商品状态\n    category_id TEXT, -- 类目ID\n    category_name TEXT, -- 类目名称\n    category_path TEXT, -- 类目路径\n    brand_id TEXT, -- 品牌ID\n    brand_name TEXT, -- 品牌名称\n    brand_english_name TEXT, -- 品牌英文名\n    seller_id TEXT, -- 卖家ID\n    seller_name TEXT, -- 卖家名称\n    seller_type INTEGER, -- 卖家类型\n    shop_id TEXT, -- 店铺ID\n    shop_name TEXT, -- 店铺名称\n    product_price REAL, -- 商品价格\n    market_price REAL, -- 市场价\n    cost_price REAL, -- 成本价\n    wholesale_price REAL, -- 批发价\n    product_quantity INTEGER, -- 商品数量\n    product_unit TEXT, -- 商品单位\n    product_weight REAL, -- 商品重量(克)\n    product_volume REAL, -- 商品体积(cm³)\n    product_spec TEXT, -- 商品规格\n    product_color TEXT, -- 商品颜色\n    product_size TEXT, -- 商品尺寸\n    product_material TEXT, -- 商品材质\n    product_origin TEXT, -- 商品产地\n    product_shelf_life INTEGER, -- 保质期(天)\n    manufacture_date DATE, -- 生产日期\n    expiry_date DATE, -- 过期日期\n    batch_number TEXT, -- 批次号\n    product_barcode TEXT, -- 商品条码\n    warehouse_id TEXT, -- 发货仓库ID\n    warehouse_name TEXT, -- 发货仓库名称\n\n    -- address_info\n    receiver_name TEXT, -- 收货人姓名\n    receiver_mobile TEXT, -- 收货人手机\n    receiver_tel TEXT, -- 收货人电话\n    receiver_email TEXT, -- 收货人邮箱\n    receiver_country TEXT, -- 国家\n    receiver_province TEXT, -- 省份\n    receiver_city TEXT, -- 城市\n    receiver_district TEXT, -- 区县\n    receiver_street TEXT, -- 街道\n    receiver_address TEXT, -- 详细地址\n    receiver_zip TEXT, -- 邮编\n    address_type INTEGER, -- 地址类型\n    is_default INTEGER, -- 是否默认地址\n    longitude REAL, -- 经度\n    latitude REAL, -- 纬度\n    address_label TEXT, -- 地址标签\n\n    -- shipping_info\n    shipping_type INTEGER, -- 配送方式\n    shipping_method TEXT, -- 配送方式名称\n    shipping_company TEXT, -- 快递公司\n    shipping_company_code TEXT, -- 快递公司编码\n    shipping_no TEXT, -- 快递单号\n    shipping_time DATETIME, -- 发货时间\n    shipping_remark TEXT, -- 发货备注\n    expect_receive_time DATETIME, -- 预计送达时间\n    receive_time DATETIME, -- 收货时间\n    sign_type INTEGER, -- 签收类型\n    shipping_status INTEGER, -- 物流状态\n    tracking_url TEXT, -- 物流跟踪URL\n    is_free_shipping INTEGER, -- 是否包邮\n    shipping_insurance REAL, -- 运费险金额\n    shipping_distance REAL, -- 配送距离\n    delivered_time DATETIME, -- 送达时间\n    delivery_staff_id TEXT, -- 配送员ID\n    delivery_staff_name TEXT, -- 配送员姓名\n    delivery_staff_mobile TEXT, -- 配送员电话\n\n    -- payment_info\n    payment_id TEXT, -- 支付ID\n    payment_no TEXT, -- 支付单号\n    payment_type INTEGER, -- 支付方式\n    payment_method TEXT, -- 支付方式名称\n    payment_status INTEGER, -- 支付状态\n    payment_platform TEXT, -- 支付平台\n    transaction_id TEXT, -- 交易流水号\n    payment_time DATETIME, -- 支付时间\n    payment_account TEXT, -- 支付账号\n    payment_bank TEXT, -- 支付银行\n    payment_card_type TEXT, -- 支付卡类型\n    payment_card_no TEXT, -- 支付卡号\n    payment_scene TEXT, -- 支付场景\n    payment_client_ip TEXT, -- 支付IP\n    payment_device TEXT, -- 支付设备\n    payment_remark TEXT, -- 支付备注\n    payment_voucher TEXT, -- 支付凭证\n\n    -- promotion_info\n    promotion_id TEXT, -- 活动ID\n    promotion_name TEXT, -- 活动名称\n    promotion_type INTEGER, -- 活动类型\n    promotion_desc TEXT, -- 活动描述\n    promotion_start_time DATETIME, -- 活动开始时间\n    promotion_end_time DATETIME, -- 活动结束时间\n    coupon_id TEXT, -- 优惠券ID\n    coupon_code TEXT, -- 优惠券码\n    coupon_type INTEGER, -- 优惠券类型\n    coupon_name TEXT, -- 优惠券名称\n    coupon_desc TEXT, -- 优惠券描述\n    points_used INTEGER, -- 使用积分\n    points_gained INTEGER, -- 获得积分\n    points_multiple REAL, -- 积分倍率\n    is_first_order INTEGER, -- 是否首单\n    is_new_customer INTEGER, -- 是否新客\n    marketing_channel TEXT, -- 营销渠道\n    marketing_source TEXT, -- 营销来源\n    referral_code TEXT, -- 推荐码\n    referral_user_id TEXT, -- 推荐人ID\n\n    -- after_sale_info\n    refund_id TEXT, -- 退款ID\n    refund_no TEXT, -- 退款单号\n    refund_type INTEGER, -- 退款类型\n    refund_status INTEGER, -- 退款状态\n    refund_reason TEXT, -- 退款原因\n    refund_desc TEXT, -- 退款描述\n    refund_time DATETIME, -- 退款时间\n    refund_amount REAL, -- 退款金额\n    return_shipping_no TEXT, -- 退货快递单号\n    return_shipping_company TEXT, -- 退货快递公司\n    return_shipping_time DATETIME, -- 退货时间\n    refund_evidence TEXT, -- 退款凭证\n    complaint_id TEXT, -- 投诉ID\n    complaint_type INTEGER, -- 投诉类型\n    complaint_status INTEGER, -- 投诉状态\n    complaint_content TEXT, -- 投诉内容\n    complaint_time DATETIME, -- 投诉时间\n    complaint_handle_time DATETIME, -- 投诉处理时间\n    complaint_handle_result TEXT, -- 投诉处理结果\n    evaluation_score INTEGER, -- 评价分数\n    evaluation_content TEXT, -- 评价内容\n    evaluation_time DATETIME, -- 评价时间\n    evaluation_reply TEXT, -- 评价回复\n    evaluation_reply_time DATETIME, -- 评价回复时间\n    evaluation_images TEXT, -- 评价图片\n    evaluation_videos TEXT, -- 评价视频\n    is_anonymous INTEGER, -- 是否匿名评价\n\n    -- invoice_info\n    invoice_type INTEGER, -- 发票类型\n    invoice_title TEXT, -- 发票抬头\n    invoice_content TEXT, -- 发票内容\n    tax_no TEXT, -- 税号\n    invoice_amount REAL, -- 发票金额\n    invoice_status INTEGER, -- 发票状态\n    invoice_time DATETIME, -- 开票时间\n    invoice_number TEXT, -- 发票号码\n    invoice_code TEXT, -- 发票代码\n    company_name TEXT, -- 单位名称\n    company_address TEXT, -- 单位地址\n    company_tel TEXT, -- 单位电话\n    company_bank TEXT, -- 开户银行\n    company_account TEXT, -- 银行账号\n\n    -- delivery_time_info\n    expect_delivery_time DATETIME, -- 期望配送时间\n    delivery_period_type INTEGER, -- 配送时段类型\n    delivery_period_start TEXT, -- 配送时段开始\n    delivery_period_end TEXT, -- 配送时段结束\n    delivery_priority INTEGER, -- 配送优先级\n\n    -- tag_info\n    order_tags TEXT, -- 订单标签\n    user_tags TEXT, -- 用户标签\n    product_tags TEXT, -- 商品标签\n    risk_level INTEGER, -- 风险等级\n    risk_tags TEXT, -- 风险标签\n    business_tags TEXT, -- 业务标签\n\n    -- commercial_info\n    gross_profit REAL, -- 毛利\n    gross_profit_rate REAL, -- 毛利率\n    settlement_amount REAL, -- 结算金额\n    settlement_time DATETIME, -- 结算时间\n    settlement_cycle INTEGER, -- 结算周期\n    settlement_status INTEGER, -- 结算状态\n    commission_rate REAL, -- 佣金比例\n    platform_service_fee REAL, -- 平台服务费\n    ad_cost REAL, -- 广告费用\n    promotion_cost REAL -- 推广费用\n);\n\n-- 插入示例数据\nINSERT INTO order_wide_table (\n    -- 基础订单信息\n    order_id, order_no, order_type, order_status, create_time, order_source,\n    -- 订单金额\n    original_amount, payment_amount, shipping_amount,\n    -- 用户信息\n    user_id, user_name, user_level, mobile,\n    -- 商品信息\n    product_id, product_name, product_quantity, product_price,\n    -- 收货信息\n    receiver_name, receiver_mobile, receiver_address,\n    -- 物流信息\n    shipping_no, shipping_status,\n    -- 支付信息\n    payment_type, payment_status,\n    -- 营销信息\n    promotion_id, coupon_amount,\n    -- 发票信息\n    invoice_type, invoice_title\n) VALUES \n(\n    'ORD20240101001', 'NO20240101001', 1, 2, '2024-01-01 10:00:00', 'APP',\n    199.99, 188.88, 10.00,\n    'USER001', '张三', 2, '13800138000',\n    'PRD001', 'iPhone 15 手机壳', 2, 89.99,\n    '李四', '13900139000', '北京市朝阳区XX路XX号',\n    'SF123456789', 1,\n    1, 1,\n    'PROM001', 20.00,\n    1, '个人'\n),\n(\n    'ORD20240101002', 'NO20240101002', 1, 1, '2024-01-01 11:00:00', 'H5',\n    299.99, 279.99, 0.00,\n    'USER002', '王五', 3, '13700137000',\n    'PRD002', 'AirPods Pro 保护套', 1, 299.99,\n    '赵六', '13600136000', '上海市浦东新区XX路XX号',\n    'YT987654321', 2,\n    2, 2,\n    'PROM002', 10.00,\n    2, '上海科技有限公司'\n),\n(\n    'ORD20240101003', 'NO20240101003', 2, 3, '2024-01-01 12:00:00', 'WEB',\n    1999.99, 1899.99, 0.00,\n    'USER003', '陈七', 4, '13500135000',\n    'PRD003', 'MacBook Pro 电脑包', 1, 1999.99,\n    '孙八', '13400134000', '广州市天河区XX路XX号',\n    'JD123123123', 3,\n    3, 1,\n    'PROM003', 100.00,\n    1, '个人'\n);\n"
  dbgpt.sql: ""
  test_case.md: "# 测试问题\n\n## 场景一 \n\n学校管理系统，主要测试SQL助手的联合查询，条件查询和排序功能。\n\n我们的数据库有三个表：学生表、课程表和成绩表。我们要测试SQL助手能否处理复杂的SQL查询，包括连接多个表，按照一定的条件筛选数据，以及对结果进行排序。\n\n### Q1\n\n查询所有学生的姓名，专业和成绩，按成绩降序排序\n\nSQL：\n```sql\nSELECT students.student_name, students.major, scores.score\nFROM students\nJOIN scores ON students.student_id = scores.student_id\nORDER BY scores.score DESC;\n```\n\n### Q2\n\n查询 \"计算机科学\" 专业的学生的平均成绩\n\nSQL：\n```sql\nSELECT AVG(scores.score) as avg_score\nFROM students\nJOIN scores ON students.student_id = scores.student_id\nWHERE students.major = '计算机科学';\n```\n\n### Q3\n\n查询哪些学生在 \"2023年春季\" 学期的课程学分总和超过2学分\n\n```sql\nSELECT students.student_name\nFROM students\nJOIN scores ON students.student_id = scores.student_id\nJOIN courses ON scores.course_id = courses.course_id\nWHERE scores.semester = '2023年春季'\nGROUP BY students.student_id\nHAVING SUM(courses.credit) > 2;\n```\n\n## 场景二：电商系统，主要测试SQL助手的数据聚合和分组功能。\n\n我们的数据库有三个表：用户表、商品表和订单表。我们要测试SQL助手能否处理复杂的SQL查询，包括对数据进行聚合和分组。\n\n### Q1\n\n查询每个用户的总订单数量\n\nSQL:\n\n```sql\nSELECT users.user_name, COUNT(orders.order_id) as order_count\nFROM users\nJOIN orders ON users.user_id = orders.user_id\nGROUP BY users.user_id;\n```\n\n### Q2\n\n查询每种商品的总销售额\n\n```sql\nSELECT products.product_name, SUM(products.product_price * orders.quantity) as total_sales\nFROM products\nJOIN orders ON products.product_id = orders.product_id\nGROUP BY products.product_id;\n```\n\n### Q3\n\n查询2023年最受欢迎的商品（订单数量最多的商品）\n\n```sql\nSELECT products.product_name\nFROM products\nJOIN orders ON products.product_id = orders.product_id\nWHERE YEAR(orders.order_date) = 2023\nGROUP BY products.product_id\nORDER BY COUNT(orders.order_id) DESC\nLIMIT 1;\n```"
  test_case_info_mysql.sql: |
    create database test_case_info character set utf8;
    use test_case_info;

    CREATE TABLE test_cases (
        case_id INT AUTO_INCREMENT PRIMARY KEY,
        scenario_name VARCHAR(100) COMMENT '场景名称',
        scenario_description TEXT COMMENT '场景描述',
        test_question VARCHAR(500) COMMENT '测试问题',
        expected_sql TEXT COMMENT '预期SQL',
        correct_output TEXT COMMENT '正确输出'
    ) COMMENT '测试用例表';

    INSERT INTO test_cases (scenario_name, scenario_description, test_question, expected_sql, correct_output) VALUES
    ('学校管理系统', '测试SQL助手的联合查询，条件查询和排序功能', '查询所有学生的姓名，专业和成绩，按成绩降序排序', 'SELECT students.student_name, students.major, scores.score FROM students JOIN scores ON students.student_id = scores.student_id ORDER BY scores.score DESC;', '返回所有学生的姓名，专业和成绩，按成绩降序排序的结果'),
    ('学校管理系统', '测试SQL助手的联合查询，条件查询和排序功能', '查询计算机科学专业的学生的平均成绩', 'SELECT AVG(scores.score) as avg_score FROM students JOIN scores ON students.student_id = scores.student_id WHERE students.major = ''计算机科学'';', '返回计算机科学专业学生的平均成绩'),
    ('学校管理系统', '测试SQL助手的联合查询，条件查询和排序功能', '查询哪些学生在2023年秋季学期的课程学分总和超过15', 'SELECT students.student_name FROM students JOIN scores ON students.student_id = scores.student_id JOIN courses ON scores.course_id = courses.course_id WHERE scores.semester = ''2023年秋季'' GROUP BY students.student_id HAVING SUM(courses.credit) > 15;', '返回在2023年秋季学期的课程学分总和超过15的学生的姓名'),
    ('电商系统', '测试SQL助手的数据聚合和分组功能', '查询每个用户的总订单数量', 'SELECT users.user_name, COUNT(orders.order_id) as order_count FROM users JOIN orders ON users.user_id = orders.user_id GROUP BY users.user_id;', '返回每个用户的总订单数量'),
    ('电商系统', '测试SQL助手的数据聚合和分组功能', '查询每种商品的总销售额', 'SELECT products.product_name, SUM(products.product_price * orders.quantity) as total_sales FROM products JOIN orders ON products.product_id = orders.product_id GROUP BY products.product_id;', '返回每种商品的总销售额'),
    ('电商系统', '测试SQL助手的数据聚合和分组功能', '查询2023年最受欢迎的商品（订单数量最多的商品）', 'SELECT products.product_name FROM products JOIN orders ON products.product_id = orders.product_id WHERE YEAR(orders.order_date) = 2023 GROUP BY products.product_id ORDER BY COUNT(orders.order_id) DESC LIMIT 1;', '返回2023年最受欢迎的商品（订单数量最多的商品）的名称');
  test_case_info_sqlite.sql: |
    CREATE TABLE test_cases (
        case_id INTEGER PRIMARY KEY AUTOINCREMENT,
        scenario_name VARCHAR(100),
        scenario_description TEXT,
        test_question VARCHAR(500),
        expected_sql TEXT,
        correct_output TEXT
    );


    INSERT INTO test_cases (scenario_name, scenario_description, test_question, expected_sql, correct_output) VALUES
    ('学校管理系统', '测试SQL助手的联合查询，条件查询和排序功能', '查询所有学生的姓名，专业和成绩，按成绩降序排序', 'SELECT students.student_name, students.major, scores.score FROM students JOIN scores ON students.student_id = scores.student_id ORDER BY scores.score DESC;', '返回所有学生的姓名，专业和成绩，按成绩降序排序的结果'),
    ('学校管理系统', '测试SQL助手的联合查询，条件查询和排序功能', '查询计算机科学专业的学生的平均成绩', 'SELECT AVG(scores.score) as avg_score FROM students JOIN scores ON students.student_id = scores.student_id WHERE students.major = ''计算机科学'';', '返回计算机科学专业学生的平均成绩'),
    ('学校管理系统', '测试SQL助手的联合查询，条件查询和排序功能', '查询哪些学生在2023年秋季学期的课程学分总和超过15', 'SELECT students.student_name FROM students JOIN scores ON students.student_id = scores.student_id JOIN courses ON scores.course_id = courses.course_id WHERE scores.semester = ''2023年秋季'' GROUP BY students.student_id HAVING SUM(courses.credit) > 15;', '返回在2023年秋季学期的课程学分总和超过15的学生的姓名'),
    ('电商系统', '测试SQL助手的数据聚合和分组功能', '查询每个用户的总订单数量', 'SELECT users.user_name, COUNT(orders.order_id) as order_count FROM users JOIN orders ON users.user_id = orders.user_id GROUP BY users.user_id;', '返回每个用户的总订单数量'),
    ('电商系统', '测试SQL助手的数据聚合和分组功能', '查询每种商品的总销售额', 'SELECT products.product_name, SUM(products.product_price * orders.quantity) as total_sales FROM products JOIN orders ON products.product_id = orders.product_id GROUP BY products.product_id;', '返回每种商品的总销售额'),
    ('电商系统', '测试SQL助手的数据聚合和分组功能', '查询2023年最受欢迎的商品（订单数量最多的商品）', 'SELECT products.product_name FROM products JOIN orders ON products.product_id = orders.product_id WHERE YEAR(orders.order_date) = 2023 GROUP BY products.product_id ORDER BY COUNT(orders.order_id) DESC LIMIT 1;', '返回2023年最受欢迎的商品（订单数量最多的商品）的名称');
  test_case_info_vertica.sql: |
    CREATE SCHEMA test_case_info;
    COMMENT ON SCHEMA test_case_info is '测试用例信息';

    SET SEARCH_PATH = test_case_info;

    CREATE TABLE test_cases (
        case_id SERIAL /*INT AUTO_INCREMENT*/ PRIMARY KEY,
        scenario_name VARCHAR(100),
        scenario_description VARCHAR(6500),
        test_question VARCHAR(500),
        expected_sql VARCHAR(6500),
        correct_output VARCHAR(6500)
    );
    COMMENT ON TABLE test_cases IS '测试用例表';
    COMMENT ON COLUMN test_cases.scenario_name IS '场景名称';
    COMMENT ON COLUMN test_cases.scenario_description IS '场景描述';
    COMMENT ON COLUMN test_cases.test_question IS '测试问题';
    COMMENT ON COLUMN test_cases.expected_sql IS '预期SQL';
    COMMENT ON COLUMN test_cases.correct_output IS '正确输出';

    INSERT INTO test_cases (scenario_name, scenario_description, test_question, expected_sql, correct_output) VALUES
    ('学校管理系统', '测试SQL助手的联合查询，条件查询和排序功能', '查询所有学生的姓名，专业和成绩，按成绩降序排序', 'SELECT students.student_name, students.major, scores.score FROM students JOIN scores ON students.student_id = scores.student_id ORDER BY scores.score DESC;', '返回所有学生的姓名，专业和成绩，按成绩降序排序的结果'),
    ('学校管理系统', '测试SQL助手的联合查询，条件查询和排序功能', '查询计算机科学专业的学生的平均成绩', 'SELECT AVG(scores.score) as avg_score FROM students JOIN scores ON students.student_id = scores.student_id WHERE students.major = ''计算机科学'';', '返回计算机科学专业学生的平均成绩'),
    ('学校管理系统', '测试SQL助手的联合查询，条件查询和排序功能', '查询哪些学生在2023年秋季学期的课程学分总和超过15', 'SELECT students.student_name FROM students JOIN scores ON students.student_id = scores.student_id JOIN courses ON scores.course_id = courses.course_id WHERE scores.semester = ''2023年秋季'' GROUP BY students.student_id HAVING SUM(courses.credit) > 15;', '返回在2023年秋季学期的课程学分总和超过15的学生的姓名'),
    ('电商系统', '测试SQL助手的数据聚合和分组功能', '查询每个用户的总订单数量', 'SELECT users.user_name, COUNT(orders.order_id) as order_count FROM users JOIN orders ON users.user_id = orders.user_id GROUP BY users.user_id;', '返回每个用户的总订单数量'),
    ('电商系统', '测试SQL助手的数据聚合和分组功能', '查询每种商品的总销售额', 'SELECT products.product_name, SUM(products.product_price * orders.quantity) as total_sales FROM products JOIN orders ON products.product_id = orders.product_id GROUP BY products.product_id;', '返回每种商品的总销售额'),
    ('电商系统', '测试SQL助手的数据聚合和分组功能', '查询2023年最受欢迎的商品（订单数量最多的商品）', 'SELECT products.product_name FROM products JOIN orders ON products.product_id = orders.product_id WHERE YEAR(orders.order_date) = 2023 GROUP BY products.product_id ORDER BY COUNT(orders.order_id) DESC LIMIT 1;', '返回2023年最受欢迎的商品（订单数量最多的商品）的名称');

    COMMIT;
  user_config_mysql.sql: |-
    USE mysql;
    UPDATE user SET Host='%' WHERE User='root';
    FLUSH PRIVILEGES;
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: db
  name: db-cm2
